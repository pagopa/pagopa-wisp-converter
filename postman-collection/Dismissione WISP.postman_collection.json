{
  "info": {
    "_postman_id": "520d5162-8d7d-401d-bf60-0e1c6e945f5e",
    "name": "Dismissione WISP",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "33204133"
  },
  "item": [
    {
      "name": "nodoInviaRPT",
      "item": [
        {
          "name": "0.1.E) Creating a debt position (seg code == 48 DRAFT) for Wisp Converter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"check_status\", function () {",
                  "  pm.response.to.have.status(201);",
                  "  const responseJson = pm.response.json();",
                  "  pm.globals.set(\"iuv_saved\", responseJson.paymentOption[0].iuv);",
                  "});",
                  "",
                  "pm.globals.set(\"creditor_saved\", pm.globals.get(\"creditor_institution_code\"));",
                  "pm.globals.set(\"iupd_saved\", pm.globals.get(\"iupd\"));",
                  "",
                  "",
                  "//console.log(pm.globals.get(\"creditor_saved\"))",
                  "//postman.setNextRequest(\"createDebtPosition_409_DuplicatedIUV_sameDebtPos\");",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let iuv_wrong_seg_code = makeNumericalStringForIuv(15, \"48\")",
                  "",
                  "let iupd_wrong_seg_code = makeAlphaNumericalString(20)",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.iuv_wrong_seg_code\", iuv_wrong_seg_code);",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.iupd_wrong_seg_code\", iupd_wrong_seg_code);",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeAlphaNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789ABCDEFGJKHILMNOPQRSTUVWXYZ';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "} ",
                  "",
                  "function makeNumericalStringForIuv(length, segregationCode) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    result = segregationCode + result",
                  "    return result;",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_gpd}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"iupd\": \"{{wisp_dismantling.iupd_wrong_seg_code}}\",\r\n    \"type\": \"F\",\r\n    \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n    \"fullName\": \"John Doe\",\r\n    \"streetName\": \"streetName\",\r\n    \"civicNumber\": \"11\",\r\n    \"postalCode\": \"00100\",\r\n    \"city\": \"city\",\r\n    \"province\": \"RM\",\r\n    \"region\": \"RM\",\r\n    \"country\": \"IT\",\r\n    \"email\": \"lorem@lorem.com\",\r\n    \"phone\": \"333-123456789\",\r\n    \"companyName\": \"companyName\",\r\n    \"officeName\": \"officeName\",\r\n    \"switchToExpired\": false,\r\n    \"paymentOption\": [\r\n        {\r\n            \"iuv\": \"{{wisp_dismantling.iuv_wrong_seg_code}}\",\r\n            \"amount\": 10000,\r\n            \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n            \"isPartialPayment\": false,\r\n            \"dueDate\": \"{{due_date}}\",\r\n            \"retentionDate\": \"{{retention_date}}\",\r\n            \"fee\": 0,\r\n            \"transfer\": [\r\n                {\r\n                    \"idTransfer\": \"1\",\r\n                    \"amount\": 8000,\r\n                    \"remittanceInformation\": \"remittanceInformation 1\",\r\n                    \"category\": \"9/0101108TS/\",\r\n                    \"iban\": \"IT0000000000000000000000000\"\r\n                },\r\n                {\r\n                    \"idTransfer\": \"2\",\r\n                    \"amount\": 2000,\r\n                    \"remittanceInformation\": \"remittanceInformation 2\",\r\n                    \"category\": \"9/0101108TS/\",\r\n                    \"iban\": \"IT0000000000000000000000000\"\r\n                }\r\n            ],\r\n            \"paymentOptionMetadata\": null\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url_gpd_core}}/organizations/:creditorInstitutionCode/debtpositions?toPublish=false",
              "host": [
                "{{url_gpd_core}}"
              ],
              "path": [
                "organizations",
                ":creditorInstitutionCode",
                "debtpositions"
              ],
              "query": [
                {
                  "key": "toPublish",
                  "value": "false"
                }
              ],
              "variable": [
                {
                  "key": "creditorInstitutionCode",
                  "value": "15376371009"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "0.1.F) Creating a debt position (seg code == 48) for Wisp Converter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"check_status\", function () {",
                  "  pm.response.to.have.status(201);",
                  "  const responseJson = pm.response.json();",
                  "  pm.globals.set(\"iuv_saved\", responseJson.paymentOption[0].iuv);",
                  "});",
                  "",
                  "pm.globals.set(\"creditor_saved\", pm.globals.get(\"creditor_institution_code\"));",
                  "pm.globals.set(\"iupd_saved\", pm.globals.get(\"iupd\"));",
                  "",
                  "",
                  "//console.log(pm.globals.get(\"creditor_saved\"))",
                  "//postman.setNextRequest(\"createDebtPosition_409_DuplicatedIUV_sameDebtPos\");",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let iuv_wrong_seg_code = makeNumericalStringForIuv(15, \"48\")",
                  "",
                  "let iupd_wrong_seg_code = makeAlphaNumericalString(20)",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.iuv_wrong_seg_code\", iuv_wrong_seg_code);",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.iupd_wrong_seg_code\", iupd_wrong_seg_code);",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeAlphaNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789ABCDEFGJKHILMNOPQRSTUVWXYZ';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "} ",
                  "",
                  "function makeNumericalStringForIuv(length, segregationCode) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    result = segregationCode + result",
                  "    return result;",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_gpd}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"iupd\": \"{{wisp_dismantling.iupd_wrong_seg_code}}\",\r\n    \"type\": \"F\",\r\n    \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n    \"fullName\": \"John Doe\",\r\n    \"streetName\": \"streetName\",\r\n    \"civicNumber\": \"11\",\r\n    \"postalCode\": \"00100\",\r\n    \"city\": \"city\",\r\n    \"province\": \"RM\",\r\n    \"region\": \"RM\",\r\n    \"country\": \"IT\",\r\n    \"email\": \"lorem@lorem.com\",\r\n    \"phone\": \"333-123456789\",\r\n    \"companyName\": \"companyName\",\r\n    \"officeName\": \"officeName\",\r\n    \"switchToExpired\": false,\r\n    \"paymentOption\": [\r\n        {\r\n            \"iuv\": \"{{wisp_dismantling.iuv_wrong_seg_code}}\",\r\n            \"amount\": 10000,\r\n            \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n            \"isPartialPayment\": false,\r\n            \"dueDate\": \"{{due_date}}\",\r\n            \"retentionDate\": \"{{retention_date}}\",\r\n            \"fee\": 0,\r\n            \"transfer\": [\r\n                {\r\n                    \"idTransfer\": \"1\",\r\n                    \"amount\": 8000,\r\n                    \"remittanceInformation\": \"remittanceInformation 1\",\r\n                    \"category\": \"9/0101108TS/\",\r\n                    \"iban\": \"IT0000000000000000000000000\"\r\n                },\r\n                {\r\n                    \"idTransfer\": \"2\",\r\n                    \"amount\": 2000,\r\n                    \"remittanceInformation\": \"remittanceInformation 2\",\r\n                    \"category\": \"9/0101108TS/\",\r\n                    \"iban\": \"IT0000000000000000000000000\"\r\n                }\r\n            ],\r\n            \"paymentOptionMetadata\": null\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url_gpd_core}}/organizations/:creditorInstitutionCode/debtpositions?toPublish=true",
              "host": [
                "{{url_gpd_core}}"
              ],
              "path": [
                "organizations",
                ":creditorInstitutionCode",
                "debtpositions"
              ],
              "query": [
                {
                  "key": "toPublish",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "creditorInstitutionCode",
                  "value": "15376371009"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.A) Organization sends a single RPT to Nodo [OK with no Stamp]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: \"02\" + makeNumericalString(13),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11a\", request);",
                  "",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "// extracting collection variables",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "",
                  "// ------------------",
                  "// ------ TEST ------",
                  "// ------------------",
                  "pm.test(\"Request returned outcome OK\", () => {",
                  "    pm.expect(rptResponse[\"esito\"]).to.eql(\"OK\");",
                  "});",
                  "pm.test(\"Request returned WISP-related URL\", () => {",
                  "    pm.expect(rptResponse[\"url\"]).to.exist();",
                  "    pm.expect(rptResponse[\"redirect\"]).to.exist();",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11a}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.B) Organization sends a single RPT to Nodo [OK with Stamp]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: \"02\" + makeNumericalString(13),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        stamp: {",
                  "                            type: \"01\",",
                  "                            document_hash: \"cXVlc3RhIMOoIHVuYSBtYXJjYSBkYSBib2xsbw==\",",
                  "                            province: \"RM\"",
                  "                        },",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11b\", request);",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount.toFixed(2)}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11b}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.C) Organization sends a single RPT to Nodo [OK with no Stamp, station on GPD]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: \"15376371009\",",
                  "    creditor_institution: \"15376371009\",",
                  "    station: \"15376371009_48\",",
                  "    psp: \"AGID_01\",",
                  "    psp_broker: \"97735020584\",",
                  "    channel: \"97735020584_03\",",
                  "    channel_password: \"pwd_AgID\",",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: makeNumericalString(15),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: \"IT76P0306909790100000300089\",",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: \"IT76P0306909790100000300089\",",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11c\", request);",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11c}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.E) Organization sends a single RPT to Nodo [KO][existing payment position in invalid state]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"77777777777\",",
                  "                name: \"EC_TE S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Corso Italia\",",
                  "                address_number: \"1\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: pm.collectionVariables.get(\"wisp_dismantling.iuv_wrong_seg_code\"),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11a\", request);",
                  "",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.F) Organization sends a single RPT to Nodo [OK with no Stamp] [segregation code on GPD]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"77777777777\",",
                  "                name: \"EC_TE S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Corso Italia\",",
                  "                address_number: \"1\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: pm.collectionVariables.get(\"wisp_dismantling.iuv_wrong_seg_code\"),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11a\", request);",
                  "",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "// extracting collection variables",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "",
                  "// ------------------",
                  "// ------ TEST ------",
                  "// ------------------",
                  "pm.test(\"Request returned outcome OK\", () => {",
                  "    pm.expect(rptResponse[\"esito\"]).to.eql(\"OK\");",
                  "});",
                  "pm.test(\"Request returned WISP-related URL\", () => {",
                  "    pm.expect(rptResponse[\"url\"]).to.exist();",
                  "    pm.expect(rptResponse[\"redirect\"]).to.exist();",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11a}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.H) Organization sends a single RPT to Nodo [OK with no Stamp, PO payment type]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "",
                  "",
                  "let test_data = {",
                  "    creditor_institution_broker: \"15376371009\",",
                  "    creditor_institution: \"15376371009\",",
                  "    station: \"15376371009_09\",",
                  "    psp: \"AGID_01\",",
                  "    psp_broker: \"97735020584\",",
                  "    channel: \"97735020584_02\",",
                  "    channel_password: pm.environment.get(\"password_channel\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: \"02\" + makeNumericalString(13),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: \"IT76P0306909790100000300089\",",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: \"IT76P0306909790100000300089\",",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>${test_data.channel_password}</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11a\", request);",
                  "",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>PO</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "// extracting collection variables",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "",
                  "// ------------------",
                  "// ------ TEST ------",
                  "// ------------------",
                  "pm.test(\"Request returned outcome OK\", () => {",
                  "    pm.expect(rptResponse[\"esito\"]).to.eql(\"OK\");",
                  "});",
                  "pm.test(\"Request returned WISP-related URL\", () => {",
                  "    pm.expect(rptResponse[\"url\"]).to.exist();",
                  "    pm.expect(rptResponse[\"redirect\"]).to.exist();",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11a}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.I) Organization sends a single RPT to Nodo [OK with no Stamp, ACA draft]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: \"01000000000000000\",",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11a\", request);",
                  "",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "// extracting collection variables",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "",
                  "// ------------------",
                  "// ------ TEST ------",
                  "// ------------------",
                  "pm.test(\"Request returned outcome OK\", () => {",
                  "    pm.expect(rptResponse[\"esito\"]).to.eql(\"OK\");",
                  "});",
                  "pm.test(\"Request returned WISP-related URL\", () => {",
                  "    pm.expect(rptResponse[\"url\"]).to.exist();",
                  "    pm.expect(rptResponse[\"redirect\"]).to.exist();",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11a}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.1.J) Organization sends a single RPT to Nodo [OK with no Stamp, ACA valid]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: \"01000000000000001\",",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT12A1234512345123456789012\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "// Generating payer_delegate, aka 'soggetto versante'",
                  "var payer_delegate = `<pay_i:soggettoVersante>",
                  "        <pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoVersante>",
                  "        <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "        <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "        <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "        <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "        <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "        <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "        <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "        <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "    </pay_i:soggettoVersante>`;",
                  "",
                  "// Generating payer, aka 'soggetto pagatore'",
                  "var payer = `<pay_i:soggettoPagatore>",
                  "\t\t<pay_i:identificativoUnivocoPagatore>",
                  "\t\t\t<pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "\t\t\t<pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "\t\t</pay_i:identificativoUnivocoPagatore>",
                  "        <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "        <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "        <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "        <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "        <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "        <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "        <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "        <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "\t</pay_i:soggettoPagatore>`;",
                  "",
                  "var payee_institution = `<pay_i:enteBeneficiario>",
                  "        <pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "            <pay_i:codiceIdentificativoUnivoco>${test_data.payments[0].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "        </pay_i:identificativoUnivocoBeneficiario>",
                  "        <pay_i:denominazioneBeneficiario>${test_data.payments[0].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "        <pay_i:codiceUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "        <pay_i:denomUnitOperBeneficiario>${test_data.payments[0].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "        <pay_i:indirizzoBeneficiario>${test_data.payments[0].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "        <pay_i:civicoBeneficiario>${test_data.payments[0].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "        <pay_i:capBeneficiario>${test_data.payments[0].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "        <pay_i:localitaBeneficiario>${test_data.payments[0].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "        <pay_i:provinciaBeneficiario>${test_data.payments[0].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "        <pay_i:nazioneBeneficiario>${test_data.payments[0].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "    </pay_i:enteBeneficiario>`;",
                  "",
                  "// Generating RPT contained in nodoInviaRPT",
                  "var rpt = `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "    <pay_i:versioneOggetto>6.0</pay_i:versioneOggetto>",
                  "    <pay_i:dominio>",
                  "        <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "        <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "    </pay_i:dominio>",
                  "    <pay_i:identificativoMessaggioRichiesta>systemtest</pay_i:identificativoMessaggioRichiesta>",
                  "    <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "    <pay_i:autenticazioneSoggetto>CNS</pay_i:autenticazioneSoggetto>",
                  "    ${payer_delegate}",
                  "    ${payer}",
                  "    ${payee_institution}",
                  "    ${generateTransfers(0)}",
                  "</pay_i:RPT>`;",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ppt=\"http://ws.pagamenti.telematici.gov/ppthead\" xmlns:ws=\"http://ws.pagamenti.telematici.gov/\">",
                  "    <soapenv:Header>",
                  "        <ppt:intestazionePPT>",
                  "            <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "            <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[0].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[0].transfer.ccp}</codiceContestoPagamento>",
                  "        </ppt:intestazionePPT>",
                  "    </soapenv:Header>",
                  "    <soapenv:Body>",
                  "        <ws:nodoInviaRPT>",
                  "            <password>pwdpwdpwd</password>",
                  "            <identificativoPSP>${test_data.psp}</identificativoPSP>",
                  "            <identificativoIntermediarioPSP>${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "            <identificativoCanale>${test_data.channel}</identificativoCanale>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </ws:nodoInviaRPT>",
                  "    </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test11a\", request);",
                  "",
                  "",
                  "",
                  "// Generating transfers",
                  "function generateTransfers(index) {",
                  "    ",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    let transfers = ``;",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "",
                  "        // generating transfer",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${test_data.payments[index].transfer.single_transfers[i].fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${test_data.payments[index].transfer.single_transfers[i].creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${test_data.payments[index].transfer.single_transfers[i].creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${test_data.payments[index].transfer.single_transfers[i].payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "    }",
                  "",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "    return `<pay_i:datiVersamento>",
                  "        <pay_i:dataEsecuzionePagamento>${test_data.payments[index].transfer.payment_date}</pay_i:dataEsecuzionePagamento>",
                  "        <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "        <pay_i:tipoVersamento>BBT</pay_i:tipoVersamento>",
                  "        <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "        <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "        <pay_i:ibanAddebito>${test_data.payments[index].transfer.debtor_iban}</pay_i:ibanAddebito>",
                  "        <pay_i:bicAddebito>${test_data.payments[index].transfer.debtor_bic}</pay_i:bicAddebito>",
                  "        <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "        ${transfers}",
                  "    </pay_i:datiVersamento>`;",
                  "}",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  "    "
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esito\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "// extracting collection variables",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "",
                  "// ------------------",
                  "// ------ TEST ------",
                  "// ------------------",
                  "pm.test(\"Request returned outcome OK\", () => {",
                  "    pm.expect(rptResponse[\"esito\"]).to.eql(\"OK\");",
                  "});",
                  "pm.test(\"Request returned WISP-related URL\", () => {",
                  "    pm.expect(rptResponse[\"url\"]).to.exist();",
                  "    pm.expect(rptResponse[\"redirect\"]).to.exist();",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test11a}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "nodoInviaCarrelloRPT",
      "item": [
        {
          "name": "0.2.E) Creating a debt position (seg code == 48 DRAFT) for Wisp Converter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"check_status\", function () {",
                  "  pm.response.to.have.status(201);",
                  "  const responseJson = pm.response.json();",
                  "  pm.globals.set(\"iuv_saved\", responseJson.paymentOption[0].iuv);",
                  "});",
                  "",
                  "pm.globals.set(\"creditor_saved\", pm.globals.get(\"creditor_institution_code\"));",
                  "pm.globals.set(\"iupd_saved\", pm.globals.get(\"iupd\"));",
                  "",
                  "",
                  "//console.log(pm.globals.get(\"creditor_saved\"))",
                  "//postman.setNextRequest(\"createDebtPosition_409_DuplicatedIUV_sameDebtPos\");",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let iuv_wrong_seg_code = makeNumericalStringForIuv(15, \"48\")",
                  "",
                  "let iupd_wrong_seg_code = makeAlphaNumericalString(20)",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.iuv_wrong_seg_code\", iuv_wrong_seg_code);",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.iupd_wrong_seg_code\", iupd_wrong_seg_code);",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeAlphaNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789ABCDEFGJKHILMNOPQRSTUVWXYZ';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "} ",
                  "",
                  "function makeNumericalStringForIuv(length, segregationCode) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    result = segregationCode + result",
                  "    return result;",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_gpd}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"iupd\": \"{{wisp_dismantling.iupd_wrong_seg_code}}\",\r\n    \"type\": \"F\",\r\n    \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n    \"fullName\": \"John Doe\",\r\n    \"streetName\": \"streetName\",\r\n    \"civicNumber\": \"11\",\r\n    \"postalCode\": \"00100\",\r\n    \"city\": \"city\",\r\n    \"province\": \"RM\",\r\n    \"region\": \"RM\",\r\n    \"country\": \"IT\",\r\n    \"email\": \"lorem@lorem.com\",\r\n    \"phone\": \"333-123456789\",\r\n    \"companyName\": \"companyName\",\r\n    \"officeName\": \"officeName\",\r\n    \"switchToExpired\": false,\r\n    \"paymentOption\": [\r\n        {\r\n            \"iuv\": \"{{wisp_dismantling.iuv_wrong_seg_code}}\",\r\n            \"amount\": 10000,\r\n            \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n            \"isPartialPayment\": false,\r\n            \"dueDate\": \"{{due_date}}\",\r\n            \"retentionDate\": \"{{retention_date}}\",\r\n            \"fee\": 0,\r\n            \"transfer\": [\r\n                {\r\n                    \"idTransfer\": \"1\",\r\n                    \"amount\": 8000,\r\n                    \"remittanceInformation\": \"remittanceInformation 1\",\r\n                    \"category\": \"9/0101108TS/\",\r\n                    \"iban\": \"IT0000000000000000000000000\"\r\n                },\r\n                {\r\n                    \"idTransfer\": \"2\",\r\n                    \"amount\": 2000,\r\n                    \"remittanceInformation\": \"remittanceInformation 2\",\r\n                    \"category\": \"9/0101108TS/\",\r\n                    \"iban\": \"IT0000000000000000000000000\"\r\n                }\r\n            ],\r\n            \"paymentOptionMetadata\": null\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url_gpd_core}}/organizations/:creditorInstitutionCode/debtpositions?toPublish=false",
              "host": [
                "{{url_gpd_core}}"
              ],
              "path": [
                "organizations",
                ":creditorInstitutionCode",
                "debtpositions"
              ],
              "query": [
                {
                  "key": "toPublish",
                  "value": "false"
                }
              ],
              "variable": [
                {
                  "key": "creditorInstitutionCode",
                  "value": "15376371009"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.2.A) Organization sends an RPT cart to Nodo [OK with no Stamp, no multibeneficiary]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let cart_id = \"15376371009\" + makeNumericalString(18) + '-' + makeNumericalString(5);",
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    cart_channel: pm.environment.get(\"channel\"),",
                  "    cart_channel_password: pm.environment.get(\"channel_password\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    cart_id: cart_id,",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: makeNumericalString(15),",
                  "                ccp: cart_id,",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        },",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: makeNumericalString(15),",
                  "                ccp: cart_id,",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "",
                  "var rpt_list = '';",
                  "for (let i = 0; i < test_data.payments.length; i ++) {",
                  "",
                  "    // Update the RPTs in the XML ",
                  "    let rpt = generate_rpt(i);",
                  "    rpt_list += `<elementoListaRPT>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[i].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[i].transfer.ccp}</codiceContestoPagamento>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </elementoListaRPT>`;",
                  "}",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
                  "  <soapenv:Header>",
                  "    <ns1:intestazioneCarrelloPPT xmlns:ns1=\"http://ws.pagamenti.telematici.gov/ppthead\">",
                  "      <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "      <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "      <identificativoCarrello>${test_data.cart_id}</identificativoCarrello>",
                  "    </ns1:intestazioneCarrelloPPT>",
                  "  </soapenv:Header>",
                  "  <soapenv:Body>",
                  "    <nodoInviaCarrelloRPT xmlns=\"http://ws.pagamenti.telematici.gov/\">",
                  "      <password xmlns=\"\">${test_data.station_password}</password>",
                  "      <identificativoPSP xmlns=\"\">${test_data.psp}</identificativoPSP>",
                  "      <identificativoIntermediarioPSP xmlns=\"\">${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "      <identificativoCanale xmlns=\"\">${test_data.cart_channel}</identificativoCanale>",
                  "      <listaRPT xmlns=\"\">",
                  "        ${rpt_list}",
                  "      </listaRPT>",
                  "    </nodoInviaCarrelloRPT>",
                  "  </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test12a\", request);",
                  "",
                  "",
                  "function generate_rpt(index) {",
                  "",
                  "    // Generating payer_delegate, aka 'soggetto versante'",
                  "    var payer_delegate = `<pay_i:soggettoVersante>",
                  "            <pay_i:identificativoUnivocoVersante>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "            <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "            <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "            <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "            <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "            <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "            <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "            <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "        </pay_i:soggettoVersante>`;",
                  "",
                  "    // Generating payer, aka 'soggetto pagatore'",
                  "    var payer = `<pay_i:soggettoPagatore>",
                  "            <pay_i:identificativoUnivocoPagatore>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoPagatore>",
                  "            <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "            <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "            <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "            <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "            <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "            <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "            <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "            <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "        </pay_i:soggettoPagatore>`;",
                  "",
                  "    // Generating creditor institution beneficiary for the transfer",
                  "    var payee_institution = `<pay_i:enteBeneficiario>",
                  "            <pay_i:identificativoUnivocoBeneficiario>",
                  "                <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payments[index].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:denominazioneBeneficiario>${test_data.payments[index].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "            <pay_i:codiceUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "            <pay_i:denomUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "            <pay_i:indirizzoBeneficiario>${test_data.payments[index].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "            <pay_i:civicoBeneficiario>${test_data.payments[index].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "            <pay_i:capBeneficiario>${test_data.payments[index].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "            <pay_i:localitaBeneficiario>${test_data.payments[index].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "            <pay_i:provinciaBeneficiario>${test_data.payments[index].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "            <pay_i:nazioneBeneficiario>${test_data.payments[index].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "        </pay_i:enteBeneficiario>`;",
                  "",
                  "    // Generating transfers",
                  "    let all_transfers = generate_transfers(index);",
                  "    ",
                  "    // return the complete RPT content",
                  "    return `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "            <pay_i:versioneOggetto>6.2.0</pay_i:versioneOggetto>",
                  "            <pay_i:dominio>",
                  "                <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "                <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "            </pay_i:dominio>",
                  "            <pay_i:identificativoMessaggioRichiesta>${test_data.payments[index].transfer.ccp}</pay_i:identificativoMessaggioRichiesta>",
                  "            <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "            <pay_i:autenticazioneSoggetto>N/A</pay_i:autenticazioneSoggetto>",
                  "            ${payer_delegate}",
                  "            ${payer}",
                  "            ${payee_institution}",
                  "            <pay_i:datiVersamento>",
                  "                <pay_i:dataEsecuzionePagamento>${getCurrentDate()}</pay_i:dataEsecuzionePagamento>",
                  "                <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "                <pay_i:tipoVersamento>PO</pay_i:tipoVersamento>",
                  "                <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "                <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "                <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "                ${all_transfers}",
                  "            </pay_i:datiVersamento>",
                  "        </pay_i:RPT>`;",
                  "}",
                  "",
                  "function generate_transfers(index) {",
                  "",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    var all_transfers = '';",
                  "",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        let single_transfer = test_data.payments[index].transfer.single_transfers[i];",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            all_transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${single_transfer.amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${single_transfer.fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${single_transfer.creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${single_transfer.creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${single_transfer.creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${single_transfer.creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${single_transfer.payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${single_transfer.amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${single_transfer.taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers = transfers.concat(`<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`);",
                  "        }",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "    }",
                  "",
                  "    // updating the total amount",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "",
                  "    return all_transfers;",
                  "}",
                  "",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaCarrelloRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esitoComplessivoOperazione\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "console.log(\" -> [TRACE] Remember! I am using '02' channel for the nodoInviaCarrelloRPT but next I use '03' for NMU flow!\");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaCarrelloRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test12a}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa}}",
              "host": [
                "{{url_nodo_per_pa}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.2.B) Organization sends an RPT cart to Nodo [OK with Stamp, no multibeneficiary]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    cart_channel: pm.environment.get(\"channel\"),",
                  "    cart_channel_password: pm.environment.get(\"channel_password\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    cart_id: makeNumericalString(32),",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: makeNumericalString(15),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: 16.00,",
                  "                        fee: 0,",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301116TS/9/24B0060000000017\",",
                  "                        stamp: {",
                  "                            type: \"01\",",
                  "                            document_hash: \"cXVlc3RhIMOoIHVuYSBtYXJjYSBkYSBib2xsbw==\",",
                  "                            province: \"RM\"",
                  "                        }",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        },",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: makeNumericalString(15),",
                  "                ccp: makeNumericalString(16),",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "",
                  "var rpt_list = '';",
                  "for (let i = 0; i < test_data.payments.length; i ++) {",
                  "",
                  "    // Update the RPTs in the XML ",
                  "    let rpt = generate_rpt(i);",
                  "    rpt_list += `<elementoListaRPT>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[i].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[i].transfer.ccp}</codiceContestoPagamento>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </elementoListaRPT>`;",
                  "}",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
                  "  <soapenv:Header>",
                  "    <ns1:intestazioneCarrelloPPT xmlns:ns1=\"http://ws.pagamenti.telematici.gov/ppthead\">",
                  "      <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "      <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "      <identificativoCarrello>${test_data.cart_id}</identificativoCarrello>",
                  "    </ns1:intestazioneCarrelloPPT>",
                  "  </soapenv:Header>",
                  "  <soapenv:Body>",
                  "    <nodoInviaCarrelloRPT xmlns=\"http://ws.pagamenti.telematici.gov/\">",
                  "      <password xmlns=\"\">${test_data.cart_channel_password}</password>",
                  "      <identificativoPSP xmlns=\"\">${test_data.psp}</identificativoPSP>",
                  "      <identificativoIntermediarioPSP xmlns=\"\">${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "      <identificativoCanale xmlns=\"\">${test_data.cart_channel}</identificativoCanale>",
                  "      <listaRPT xmlns=\"\">",
                  "        ${rpt_list}",
                  "      </listaRPT>",
                  "    </nodoInviaCarrelloRPT>",
                  "  </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test12b\", request);",
                  "",
                  "",
                  "function generate_rpt(index) {",
                  "",
                  "    // Generating payer_delegate, aka 'soggetto versante'",
                  "    var payer_delegate = `<pay_i:soggettoVersante>",
                  "            <pay_i:identificativoUnivocoVersante>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "            <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "            <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "            <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "            <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "            <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "            <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "            <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "        </pay_i:soggettoVersante>`;",
                  "",
                  "    // Generating payer, aka 'soggetto pagatore'",
                  "    var payer = `<pay_i:soggettoPagatore>",
                  "            <pay_i:identificativoUnivocoPagatore>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoPagatore>",
                  "            <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "            <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "            <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "            <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "            <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "            <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "            <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "            <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "        </pay_i:soggettoPagatore>`;",
                  "",
                  "    // Generating creditor institution beneficiary for the transfer",
                  "    var payee_institution = `<pay_i:enteBeneficiario>",
                  "            <pay_i:identificativoUnivocoBeneficiario>",
                  "                <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payments[index].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:denominazioneBeneficiario>${test_data.payments[index].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "            <pay_i:codiceUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "            <pay_i:denomUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "            <pay_i:indirizzoBeneficiario>${test_data.payments[index].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "            <pay_i:civicoBeneficiario>${test_data.payments[index].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "            <pay_i:capBeneficiario>${test_data.payments[index].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "            <pay_i:localitaBeneficiario>${test_data.payments[index].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "            <pay_i:provinciaBeneficiario>${test_data.payments[index].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "            <pay_i:nazioneBeneficiario>${test_data.payments[index].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "        </pay_i:enteBeneficiario>`;",
                  "",
                  "    // Generating transfers",
                  "    let all_transfers = generate_transfers(index);",
                  "    ",
                  "    // return the complete RPT content",
                  "    return `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "            <pay_i:versioneOggetto>6.2.0</pay_i:versioneOggetto>",
                  "            <pay_i:dominio>",
                  "                <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "                <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "            </pay_i:dominio>",
                  "            <pay_i:identificativoMessaggioRichiesta>${test_data.payments[index].transfer.ccp}</pay_i:identificativoMessaggioRichiesta>",
                  "            <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "            <pay_i:autenticazioneSoggetto>N/A</pay_i:autenticazioneSoggetto>",
                  "            ${payer_delegate}",
                  "            ${payer}",
                  "            ${payee_institution}",
                  "            <pay_i:datiVersamento>",
                  "                <pay_i:dataEsecuzionePagamento>${getCurrentDate()}</pay_i:dataEsecuzionePagamento>",
                  "                <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "                <pay_i:tipoVersamento>PO</pay_i:tipoVersamento>",
                  "                <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "                <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "                <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "                ${all_transfers}",
                  "            </pay_i:datiVersamento>",
                  "        </pay_i:RPT>`;",
                  "}",
                  "",
                  "function generate_transfers(index) {",
                  "",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    var all_transfers = '';",
                  "",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        let single_transfer = test_data.payments[index].transfer.single_transfers[i];",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            all_transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${single_transfer.amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${single_transfer.fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${single_transfer.creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${single_transfer.creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${single_transfer.creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${single_transfer.creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${single_transfer.payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${single_transfer.amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${single_transfer.taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            all_transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount.toFixed(2)}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        }",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "    }",
                  "",
                  "    // updating the total amount",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "",
                  "    return all_transfers;",
                  "}",
                  "",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaCarrelloRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esitoComplessivoOperazione\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);",
                  "console.log(\" -> [TRACE] Remember! I am using '02' channel for the nodoInviaCarrelloRPT but next I use '03' for NMU flow!\");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaCarrelloRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test12b}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.2.C) Organization sends an RPT cart to Nodo [OK with no Stamp, multibeneficiary]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let iuv = \"348\" + makeNumericalString(15);",
                  "let cart_id = \"15376371009\" + iuv + '-' + makeNumericalString(5);",
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    cart_channel: pm.environment.get(\"channel\"),",
                  "    cart_channel_password: pm.environment.get(\"channel_password\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    cart_id: cart_id,",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: iuv,",
                  "                ccp: cart_id,",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        },",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: pm.environment.get(\"creditor_institution_multi\"),",
                  "                name: \"EC_TE S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Corso Italia\",",
                  "                address_number: \"1\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: iuv,",
                  "                ccp: cart_id,",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_institution_multi_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_institution_multi_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "var rpt_list = '';",
                  "for (let i = 0; i < test_data.payments.length; i ++) {",
                  "",
                  "    // Update the RPTs in the XML ",
                  "    let rpt = generate_rpt(i);",
                  "    rpt_list += `<elementoListaRPT>",
                  "            <identificativoDominio>${test_data.payments[i].payee_institution.fiscal_code}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[i].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[i].transfer.ccp}</codiceContestoPagamento>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </elementoListaRPT>`;",
                  "}",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
                  "  <soapenv:Header>",
                  "    <ns1:intestazioneCarrelloPPT xmlns:ns1=\"http://ws.pagamenti.telematici.gov/ppthead\">",
                  "      <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "      <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "      <identificativoCarrello>${test_data.cart_id}</identificativoCarrello>",
                  "    </ns1:intestazioneCarrelloPPT>",
                  "  </soapenv:Header>",
                  "  <soapenv:Body>",
                  "    <nodoInviaCarrelloRPT xmlns=\"http://ws.pagamenti.telematici.gov/\">",
                  "      <password xmlns=\"\">${test_data.cart_channel_password}</password>",
                  "      <identificativoPSP xmlns=\"\">${test_data.psp}</identificativoPSP>",
                  "      <identificativoIntermediarioPSP xmlns=\"\">${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "      <identificativoCanale xmlns=\"\">${test_data.cart_channel}</identificativoCanale>",
                  "      <listaRPT xmlns=\"\">",
                  "        ${rpt_list}",
                  "      </listaRPT>",
                  "      <multiBeneficiario xmlns=\"\">true</multiBeneficiario>",
                  "    </nodoInviaCarrelloRPT>",
                  "  </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test12c\", request);",
                  "",
                  "",
                  "function generate_rpt(index) {",
                  "",
                  "    // Generating payer_delegate, aka 'soggetto versante'",
                  "    var payer_delegate = `<pay_i:soggettoVersante>",
                  "            <pay_i:identificativoUnivocoVersante>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "            <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "            <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "            <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "            <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "            <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "            <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "            <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "        </pay_i:soggettoVersante>`;",
                  "",
                  "    // Generating payer, aka 'soggetto pagatore'",
                  "    var payer = `<pay_i:soggettoPagatore>",
                  "            <pay_i:identificativoUnivocoPagatore>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoPagatore>",
                  "            <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "            <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "            <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "            <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "            <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "            <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "            <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "            <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "        </pay_i:soggettoPagatore>`;",
                  "",
                  "    // Generating creditor institution beneficiary for the transfer",
                  "    var payee_institution = `<pay_i:enteBeneficiario>",
                  "            <pay_i:identificativoUnivocoBeneficiario>",
                  "                <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payments[index].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:denominazioneBeneficiario>${test_data.payments[index].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "            <pay_i:codiceUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "            <pay_i:denomUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "            <pay_i:indirizzoBeneficiario>${test_data.payments[index].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "            <pay_i:civicoBeneficiario>${test_data.payments[index].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "            <pay_i:capBeneficiario>${test_data.payments[index].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "            <pay_i:localitaBeneficiario>${test_data.payments[index].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "            <pay_i:provinciaBeneficiario>${test_data.payments[index].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "            <pay_i:nazioneBeneficiario>${test_data.payments[index].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "        </pay_i:enteBeneficiario>`;",
                  "",
                  "    // Generating transfers",
                  "    let all_transfers = generate_transfers(index);",
                  "    ",
                  "    // return the complete RPT content",
                  "    return `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "            <pay_i:versioneOggetto>6.2.0</pay_i:versioneOggetto>",
                  "            <pay_i:dominio>",
                  "                <pay_i:identificativoDominio>${test_data.payments[index].payee_institution.fiscal_code}</pay_i:identificativoDominio>",
                  "                <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "            </pay_i:dominio>",
                  "            <pay_i:identificativoMessaggioRichiesta>${test_data.payments[index].transfer.ccp}</pay_i:identificativoMessaggioRichiesta>",
                  "            <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "            <pay_i:autenticazioneSoggetto>N/A</pay_i:autenticazioneSoggetto>",
                  "            ${payer_delegate}",
                  "            ${payer}",
                  "            ${payee_institution}",
                  "            <pay_i:datiVersamento>",
                  "                <pay_i:dataEsecuzionePagamento>${getCurrentDate()}</pay_i:dataEsecuzionePagamento>",
                  "                <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "                <pay_i:tipoVersamento>PO</pay_i:tipoVersamento>",
                  "                <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "                <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "                <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "                ${all_transfers}",
                  "            </pay_i:datiVersamento>",
                  "        </pay_i:RPT>`;",
                  "}",
                  "",
                  "function generate_transfers(index) {",
                  "",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    var all_transfers = '';",
                  "",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        let single_transfer = test_data.payments[index].transfer.single_transfers[i];",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            all_transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${single_transfer.amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${single_transfer.fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${single_transfer.creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${single_transfer.creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${single_transfer.creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${single_transfer.creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${single_transfer.payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${single_transfer.amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${single_transfer.taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers = transfers.concat(`<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`);",
                  "        }",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "    }",
                  "",
                  "    // updating the total amount",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "",
                  "    return all_transfers;",
                  "}",
                  "",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaCarrelloRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esitoComplessivoOperazione\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  " ",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaCarrelloRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test12c}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa_auth}}",
              "host": [
                "{{url_nodo_per_pa_auth}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "1.2.E)  Organization sends an RPT cart to Nodo [KO][existing one payment position in invalid state]",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let cart_id = \"15376371009\" + makeNumericalString(18) + '-' + makeNumericalString(5);",
                  "let test_data = {",
                  "    creditor_institution_broker: pm.environment.get(\"creditor_institution\"),",
                  "    creditor_institution: pm.environment.get(\"creditor_institution_broker\"),",
                  "    station: pm.environment.get(\"station\"),",
                  "    station_password: pm.environment.get(\"station_password\"),",
                  "    psp: pm.environment.get(\"psp\"),",
                  "    psp_broker: pm.environment.get(\"psp_broker\"),",
                  "    cart_channel: pm.environment.get(\"channel\"),",
                  "    cart_channel_password: pm.environment.get(\"channel_password\"),",
                  "    channel: pm.environment.get(\"channel\"),",
                  "    channel_password: pm.environment.get(\"channel_password\"),",
                  "    cart_id: cart_id,",
                  "    transaction_id: makeNumericalString(15),",
                  "    payer: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"VRDMRN72A12H501Z\",",
                  "        name: \"Marina Verdi\",",
                  "        email: \"marina.verdi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payer_delegate: {",
                  "        type: \"F\",",
                  "        fiscal_code: \"RSSMRA70A01H501Z\",",
                  "        name: \"Mario Rossi\",",
                  "        email: \"mario.rossi@mail.com\",",
                  "        address: \"Via della Conciliazione\",",
                  "        address_number: \"1\",",
                  "        address_zipcode: \"00100\",",
                  "        address_location: \"Roma\",",
                  "        address_province: \"RM\",",
                  "        address_nation: \"IT\"",
                  "    },",
                  "    payments: [",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: makeNumericalString(15),",
                  "                ccp: cart_id,",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        },",
                  "        {",
                  "            payee_institution: {",
                  "                fiscal_code: \"15376371009\",",
                  "                name: \"PagoPA S.p.A\",",
                  "                operative_code: \"123\",",
                  "                operative_denomination: \"XXX\",",
                  "                address: \"Piazza Colonna\",",
                  "                address_number: \"370\",",
                  "                address_zipcode: \"00187\",",
                  "                address_location: \"Roma\",",
                  "                address_province: \"RM\",",
                  "                address_nation: \"IT\"",
                  "            },",
                  "            transfer: {",
                  "                iuv: pm.collectionVariables.get(\"wisp_dismantling.iuv_wrong_seg_code\"),",
                  "                ccp: cart_id,",
                  "                debtor_iban: \"IT45R0760103200000000001016\",",
                  "                debtor_bic: \"ARTIITM1045\",",
                  "                total_amount: \"\",",
                  "                total_fees: \"\",",
                  "                payment_date: getCurrentDate(),",
                  "                notes: \"Test from WISP Converter\",",
                  "                single_transfers: [",
                  "                    {",
                  "                        amount: getRandomMonetaryAmount(10.0, 599.99),",
                  "                        fee: getRandomMonetaryAmount(0, 1),",
                  "                        creditor_bic: \"ARTIITM1050\",",
                  "                        creditor_iban: pm.environment.get(\"creditor_iban\"),",
                  "                        creditor_bic2: \"ARTIITM1050\",",
                  "                        creditor_iban2: pm.environment.get(\"creditor_iban\"),",
                  "                        payer_info: \"CP1.1\",",
                  "                        taxonomy: \"9/0301109AP\"",
                  "                    }",
                  "                ]                ",
                  "            }",
                  "        }",
                  "    ]",
                  "}",
                  "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);",
                  "",
                  "",
                  "var rpt_list = '';",
                  "for (let i = 0; i < test_data.payments.length; i ++) {",
                  "",
                  "    // Update the RPTs in the XML ",
                  "    let rpt = generate_rpt(i);",
                  "    rpt_list += `<elementoListaRPT>",
                  "            <identificativoDominio>${test_data.creditor_institution}</identificativoDominio>",
                  "            <identificativoUnivocoVersamento>${test_data.payments[i].transfer.iuv}</identificativoUnivocoVersamento>",
                  "            <codiceContestoPagamento>${test_data.payments[i].transfer.ccp}</codiceContestoPagamento>",
                  "            <tipoFirma></tipoFirma>",
                  "            <rpt>${btoa(rpt)}</rpt>",
                  "        </elementoListaRPT>`;",
                  "}",
                  "",
                  "// Generating final request, then set it as variable",
                  "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
                  "  <soapenv:Header>",
                  "    <ns1:intestazioneCarrelloPPT xmlns:ns1=\"http://ws.pagamenti.telematici.gov/ppthead\">",
                  "      <identificativoIntermediarioPA>${test_data.creditor_institution_broker}</identificativoIntermediarioPA>",
                  "      <identificativoStazioneIntermediarioPA>${test_data.station}</identificativoStazioneIntermediarioPA>",
                  "      <identificativoCarrello>${test_data.cart_id}</identificativoCarrello>",
                  "    </ns1:intestazioneCarrelloPPT>",
                  "  </soapenv:Header>",
                  "  <soapenv:Body>",
                  "    <nodoInviaCarrelloRPT xmlns=\"http://ws.pagamenti.telematici.gov/\">",
                  "      <password xmlns=\"\">${test_data.station_password}</password>",
                  "      <identificativoPSP xmlns=\"\">${test_data.psp}</identificativoPSP>",
                  "      <identificativoIntermediarioPSP xmlns=\"\">${test_data.psp_broker}</identificativoIntermediarioPSP>",
                  "      <identificativoCanale xmlns=\"\">${test_data.cart_channel}</identificativoCanale>",
                  "      <listaRPT xmlns=\"\">",
                  "        ${rpt_list}",
                  "      </listaRPT>",
                  "    </nodoInviaCarrelloRPT>",
                  "  </soapenv:Body>",
                  "</soapenv:Envelope>`;",
                  "pm.variables.set(\"wisp_dismantling.nodoInviaRPT.request.test12e\", request);",
                  "",
                  "",
                  "function generate_rpt(index) {",
                  "",
                  "    // Generating payer_delegate, aka 'soggetto versante'",
                  "    var payer_delegate = `<pay_i:soggettoVersante>",
                  "            <pay_i:identificativoUnivocoVersante>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer_delegate.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer_delegate.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoVersante>",
                  "            <pay_i:anagraficaVersante>${test_data.payer_delegate.name}</pay_i:anagraficaVersante>",
                  "            <pay_i:indirizzoVersante>${test_data.payer_delegate.address}</pay_i:indirizzoVersante>",
                  "            <pay_i:civicoVersante>${test_data.payer_delegate.address_number}</pay_i:civicoVersante>",
                  "            <pay_i:capVersante>${test_data.payer_delegate.address_zipcode}</pay_i:capVersante>",
                  "            <pay_i:localitaVersante>${test_data.payer_delegate.address_location}</pay_i:localitaVersante>",
                  "            <pay_i:provinciaVersante>${test_data.payer_delegate.address_province}</pay_i:provinciaVersante>",
                  "            <pay_i:nazioneVersante>${test_data.payer_delegate.address_nation}</pay_i:nazioneVersante>",
                  "            <pay_i:e-mailVersante>${test_data.payer_delegate.email}</pay_i:e-mailVersante>",
                  "        </pay_i:soggettoVersante>`;",
                  "",
                  "    // Generating payer, aka 'soggetto pagatore'",
                  "    var payer = `<pay_i:soggettoPagatore>",
                  "            <pay_i:identificativoUnivocoPagatore>",
                  "                <pay_i:tipoIdentificativoUnivoco>${test_data.payer.type}</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payer.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoPagatore>",
                  "            <pay_i:anagraficaPagatore>${test_data.payer.name}</pay_i:anagraficaPagatore>",
                  "            <pay_i:indirizzoPagatore>${test_data.payer.address}</pay_i:indirizzoPagatore>",
                  "            <pay_i:civicoPagatore>${test_data.payer.address_number}</pay_i:civicoPagatore>",
                  "            <pay_i:capPagatore>${test_data.payer.address_zipcode}</pay_i:capPagatore>",
                  "            <pay_i:localitaPagatore>${test_data.payer.address_location}</pay_i:localitaPagatore>",
                  "            <pay_i:provinciaPagatore>${test_data.payer.address_province}</pay_i:provinciaPagatore>",
                  "            <pay_i:nazionePagatore>${test_data.payer.address_nation}</pay_i:nazionePagatore>",
                  "            <pay_i:e-mailPagatore>${test_data.payer.email}</pay_i:e-mailPagatore>",
                  "        </pay_i:soggettoPagatore>`;",
                  "",
                  "    // Generating creditor institution beneficiary for the transfer",
                  "    var payee_institution = `<pay_i:enteBeneficiario>",
                  "            <pay_i:identificativoUnivocoBeneficiario>",
                  "                <pay_i:tipoIdentificativoUnivoco>G</pay_i:tipoIdentificativoUnivoco>",
                  "                <pay_i:codiceIdentificativoUnivoco>${test_data.payments[index].payee_institution.fiscal_code}</pay_i:codiceIdentificativoUnivoco>",
                  "            </pay_i:identificativoUnivocoBeneficiario>",
                  "            <pay_i:denominazioneBeneficiario>${test_data.payments[index].payee_institution.name}</pay_i:denominazioneBeneficiario>",
                  "            <pay_i:codiceUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_code}</pay_i:codiceUnitOperBeneficiario>",
                  "            <pay_i:denomUnitOperBeneficiario>${test_data.payments[index].payee_institution.operative_denomination}</pay_i:denomUnitOperBeneficiario>",
                  "            <pay_i:indirizzoBeneficiario>${test_data.payments[index].payee_institution.address}</pay_i:indirizzoBeneficiario>",
                  "            <pay_i:civicoBeneficiario>${test_data.payments[index].payee_institution.address_number}</pay_i:civicoBeneficiario>",
                  "            <pay_i:capBeneficiario>${test_data.payments[index].payee_institution.address_zipcode}</pay_i:capBeneficiario>",
                  "            <pay_i:localitaBeneficiario>${test_data.payments[index].payee_institution.address_location}</pay_i:localitaBeneficiario>",
                  "            <pay_i:provinciaBeneficiario>${test_data.payments[index].payee_institution.address_province}</pay_i:provinciaBeneficiario>",
                  "            <pay_i:nazioneBeneficiario>${test_data.payments[index].payee_institution.address_nation}</pay_i:nazioneBeneficiario>",
                  "        </pay_i:enteBeneficiario>`;",
                  "",
                  "    // Generating transfers",
                  "    let all_transfers = generate_transfers(index);",
                  "    ",
                  "    // return the complete RPT content",
                  "    return `<pay_i:RPT xmlns:pay_i=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.digitpa.gov.it/schemas/2011/Pagamenti/ PagInf_RPT_RT_6_2_0.xsd \">",
                  "            <pay_i:versioneOggetto>6.2.0</pay_i:versioneOggetto>",
                  "            <pay_i:dominio>",
                  "                <pay_i:identificativoDominio>${test_data.creditor_institution}</pay_i:identificativoDominio>",
                  "                <pay_i:identificativoStazioneRichiedente>${test_data.station}</pay_i:identificativoStazioneRichiedente>",
                  "            </pay_i:dominio>",
                  "            <pay_i:identificativoMessaggioRichiesta>${test_data.payments[index].transfer.ccp}</pay_i:identificativoMessaggioRichiesta>",
                  "            <pay_i:dataOraMessaggioRichiesta>${getCurrentDateTime()}</pay_i:dataOraMessaggioRichiesta>",
                  "            <pay_i:autenticazioneSoggetto>N/A</pay_i:autenticazioneSoggetto>",
                  "            ${payer_delegate}",
                  "            ${payer}",
                  "            ${payee_institution}",
                  "            <pay_i:datiVersamento>",
                  "                <pay_i:dataEsecuzionePagamento>${getCurrentDate()}</pay_i:dataEsecuzionePagamento>",
                  "                <pay_i:importoTotaleDaVersare>${test_data.payments[index].transfer.total_amount}</pay_i:importoTotaleDaVersare>",
                  "                <pay_i:tipoVersamento>PO</pay_i:tipoVersamento>",
                  "                <pay_i:identificativoUnivocoVersamento>${test_data.payments[index].transfer.iuv}</pay_i:identificativoUnivocoVersamento>",
                  "                <pay_i:codiceContestoPagamento>${test_data.payments[index].transfer.ccp}</pay_i:codiceContestoPagamento>",
                  "                <pay_i:firmaRicevuta>0</pay_i:firmaRicevuta>",
                  "                ${all_transfers}",
                  "            </pay_i:datiVersamento>",
                  "        </pay_i:RPT>`;",
                  "}",
                  "",
                  "function generate_transfers(index) {",
                  "",
                  "    let total_amount = 0;",
                  "    let total_fees = 0;",
                  "    var all_transfers = '';",
                  "",
                  "    for (let i = 0; i < test_data.payments[index].transfer.single_transfers.length; i ++) {",
                  "",
                  "        let single_transfer = test_data.payments[index].transfer.single_transfers[i];",
                  "        if (test_data.payments[index].transfer.single_transfers[i].stamp === undefined) {",
                  "            all_transfers += `<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${single_transfer.amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:commissioneCaricoPA>${single_transfer.fee}</pay_i:commissioneCaricoPA>",
                  "                <pay_i:ibanAccredito>${single_transfer.creditor_iban}</pay_i:ibanAccredito>",
                  "                <pay_i:bicAccredito>${single_transfer.creditor_bic}</pay_i:bicAccredito>",
                  "                <pay_i:ibanAppoggio>${single_transfer.creditor_iban2}</pay_i:ibanAppoggio>",
                  "                <pay_i:bicAppoggio>${single_transfer.creditor_bic2}</pay_i:bicAppoggio>",
                  "                <pay_i:credenzialiPagatore>${single_transfer.payer_info}</pay_i:credenzialiPagatore>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${single_transfer.amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${single_transfer.taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "            </pay_i:datiSingoloVersamento>`;",
                  "        } else {",
                  "            transfers = transfers.concat(`<pay_i:datiSingoloVersamento>",
                  "                <pay_i:importoSingoloVersamento>${test_data.payments[index].transfer.single_transfers[i].amount}</pay_i:importoSingoloVersamento>",
                  "                <pay_i:causaleVersamento>/RFB/${test_data.payments[index].transfer.iuv}/${test_data.payments[index].transfer.single_transfers[i].amount}/TXT/DEBITORE/${test_data.payer.fiscal_code}</pay_i:causaleVersamento>",
                  "                <pay_i:datiSpecificiRiscossione>${test_data.payments[index].transfer.single_transfers[i].taxonomy}</pay_i:datiSpecificiRiscossione>",
                  "                <pay_i:datiMarcaBolloDigitale>",
                  "                    <pay_i:tipoBollo>${test_data.payments[index].transfer.single_transfers[i].stamp.type}</pay_i:tipoBollo>",
                  "                    <pay_i:hashDocumento>${test_data.payments[index].transfer.single_transfers[i].stamp.document_hash}</pay_i:hashDocumento>",
                  "                    <pay_i:provinciaResidenza>${test_data.payments[index].transfer.single_transfers[i].stamp.province}</pay_i:provinciaResidenza>",
                  "                </pay_i:datiMarcaBolloDigitale>",
                  "            </pay_i:datiSingoloVersamento>`);",
                  "        }",
                  "",
                  "        // updating total amount",
                  "        total_amount += parseFloat(test_data.payments[index].transfer.single_transfers[i].amount);",
                  "        total_fees += parseFloat(test_data.payments[index].transfer.single_transfers[i].fee);",
                  "    }",
                  "",
                  "    // updating the total amount",
                  "    test_data.payments[index].transfer.total_amount = total_amount.toFixed(2);  ",
                  "    test_data.payments[index].transfer.total_fees = total_fees.toFixed(2);  ",
                  "",
                  "    return all_transfers;",
                  "}",
                  "",
                  "",
                  "",
                  "// -----------------------",
                  "// --- UTILITY METHODS ---",
                  "// -----------------------",
                  "function makeNumericalString(length) {",
                  "    let result = '';",
                  "    const characters = '0123456789';",
                  "    const charactersLength = characters.length;",
                  "    let counter = 0;",
                  "    while (counter < length) {",
                  "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
                  "      counter += 1;",
                  "    }",
                  "    return result;",
                  "}",
                  "",
                  "function getCurrentDateTime() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  const hours = String(now.getHours()).padStart(2, '0');",
                  "  const minutes = String(now.getMinutes()).padStart(2, '0');",
                  "  const seconds = String(now.getSeconds()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
                  "}",
                  "",
                  "function getCurrentDate() {",
                  "  const now = new Date();",
                  "  const year = now.getFullYear();",
                  "  const month = String(now.getMonth() + 1).padStart(2, '0');",
                  "  const day = String(now.getDate()).padStart(2, '0');",
                  "  return `${year}-${month}-${day}`;",
                  "}",
                  "",
                  "function getRandomMonetaryAmount(min, max) {",
                  "    let value = Math.random() * (max - min) + min;",
                  "    return value.toFixed(2);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = xml2Json(responseBody);",
                  "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"ppt:nodoInviaCarrelloRPTRisposta\"];",
                  "",
                  "// extract url if outcome is OK",
                  "let url = \"\";",
                  "if (rptResponse[\"esitoComplessivoOperazione\"] === \"OK\") {",
                  "    url = rptResponse[\"url\"];",
                  "}",
                  "",
                  "",
                  "pm.collectionVariables.set(\"wisp_dismantling.redirect.url\", url);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "SOAPAction",
                "value": "nodoInviaCarrelloRPT",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subkey_wisp_nuova_connettivita}}",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{wisp_dismantling.nodoInviaRPT.request.test12e}}",
              "options": {
                "raw": {
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{url_nodo_per_pa}}",
              "host": [
                "{{url_nodo_per_pa}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "2) Redirect to Checkout",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var jsonData = xml2Json(responseBody);",
              "",
              "// ------------------",
              "// ------ TEST ------",
              "// ------------------",
              "pm.test(\"Request returned outcome OK\", () => {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "pm.test(\"Request returned redirection on metadata\", () => {",
              "    pm.expect(pm.response.code).to.not.exist(jsonData[\"html\"]);",
              "    pm.expect(jsonData[\"head\"][\"meta\"]).to.exist();",
              "    pm.expect(jsonData[\"head\"][\"meta\"][\"content\"]).to.contain(\"URL=\");",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{wisp_dismantling.redirect.url}}",
          "host": [
            "{{wisp_dismantling.redirect.url}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "3.A) Retrieve data from RE [first IUV]",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "",
              "pm.variables.set(\"wisp_dismantling.ts.creditor_institution\", test_data.creditor_institution);",
              "pm.variables.set(\"wisp_dismantling.ts.iuv\", test_data.payments[0].transfer.iuv);",
              "pm.variables.set(\"wisp_dismantling.ts.today_date\", getCurrentDate());",
              "",
              "function getCurrentDate() {",
              "  const now = new Date();",
              "  const year = now.getFullYear();",
              "  const month = String(now.getMonth() + 1).padStart(2, '0');",
              "  const day = String(now.getDate()).padStart(2, '0');",
              "  return `${year}-${month}-${day}`;",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var response = JSON.parse(responseBody);",
              "",
              "let size = response.data.length;",
              "var notice_number = undefined;",
              "",
              "if (size > 0) {",
              "",
              "    var index = 0;",
              "    while (notice_number === undefined && index < size) {",
              "        let data = response.data[index];",
              "        if (data.noticeNumber !== undefined) {",
              "            notice_number = data.noticeNumber;",
              "        }",
              "        index++;",
              "    }",
              "}",
              "",
              "",
              "var test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "test_data.payments[0].transfer.notice_number = notice_number;",
              "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_technical_support}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{url_wisp_converter_ts}}/organizations/{{wisp_dismantling.ts.creditor_institution}}/iuv/{{wisp_dismantling.ts.iuv}}?dateFrom={{wisp_dismantling.ts.today_date}}&dateTo={{wisp_dismantling.ts.today_date}}",
          "host": [
            "{{url_wisp_converter_ts}}"
          ],
          "path": [
            "organizations",
            "{{wisp_dismantling.ts.creditor_institution}}",
            "iuv",
            "{{wisp_dismantling.ts.iuv}}"
          ],
          "query": [
            {
              "key": "dateFrom",
              "value": "{{wisp_dismantling.ts.today_date}}"
            },
            {
              "key": "dateTo",
              "value": "{{wisp_dismantling.ts.today_date}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "3.B) Retrieve data from RE [second IUV]",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "",
              "pm.variables.set(\"wisp_dismantling.ts.creditor_institution\", test_data.creditor_institution);",
              "pm.variables.set(\"wisp_dismantling.ts.iuv\", test_data.payments[1].transfer.iuv);",
              "pm.variables.set(\"wisp_dismantling.ts.today_date\", getCurrentDate());",
              "",
              "",
              "function getCurrentDate() {",
              "  const now = new Date();",
              "  const year = now.getFullYear();",
              "  const month = String(now.getMonth() + 1).padStart(2, '0');",
              "  const day = String(now.getDate()).padStart(2, '0');",
              "  return `${year}-${month}-${day}`;",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_technical_support}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{url_wisp_converter_ts}}/organizations/{{wisp_dismantling.ts.creditor_institution}}/iuv/{{wisp_dismantling.ts.iuv}}?dateFrom={{wisp_dismantling.ts.today_date}}&dateTo={{wisp_dismantling.ts.today_date}}",
          "host": [
            "{{url_wisp_converter_ts}}"
          ],
          "path": [
            "organizations",
            "{{wisp_dismantling.ts.creditor_institution}}",
            "iuv",
            "{{wisp_dismantling.ts.iuv}}"
          ],
          "query": [
            {
              "key": "dateFrom",
              "value": "{{wisp_dismantling.ts.today_date}}"
            },
            {
              "key": "dateTo",
              "value": "{{wisp_dismantling.ts.today_date}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "4.A) Send a verify for the payment notice [first IUV]",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "",
              "// Generating final request, then set it as variable",
              "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:nod=\"http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd\">",
              "    <soapenv:Header/>",
              "    <soapenv:Body>",
              "        <nod:verifyPaymentNoticeReq>",
              "            <idPSP>${test_data.psp}</idPSP>",
              "            <idBrokerPSP>${test_data.psp_broker}</idBrokerPSP>",
              "            <idChannel>${test_data.channel}</idChannel>",
              "            <password>${test_data.channel_password}</password>",
              "            <qrCode>",
              "                <fiscalCode>${test_data.creditor_institution}</fiscalCode>",
              "                <noticeNumber>${test_data.payments[0].transfer.notice_number}</noticeNumber>",
              "            </qrCode>",
              "        </nod:verifyPaymentNoticeReq>",
              "    </soapenv:Body>",
              "</soapenv:Envelope>`;",
              "pm.variables.set(\"wisp_dismantling.verify_payment_notice.request\", request);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "SOAPAction",
            "value": "verifyPaymentNotice"
          },
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_wisp_nuova_connettivita}}"
          },
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{wisp_dismantling.verify_payment_notice.request}}"
        },
        "url": {
          "raw": "{{url_node_for_psp_auth}}",
          "host": [
            "{{url_node_for_psp_auth}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "4.A) Send a verify for the payment notice [first IUV] Copy",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "",
              "// Generating final request, then set it as variable",
              "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:nod=\"http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd\">",
              "    <soapenv:Header/>",
              "    <soapenv:Body>",
              "        <nod:verifyPaymentNoticeReq>",
              "            <idPSP>${test_data.psp}</idPSP>",
              "            <idBrokerPSP>${test_data.psp_broker}</idBrokerPSP>",
              "            <idChannel>${test_data.channel}</idChannel>",
              "            <password>${test_data.channel_password}</password>",
              "            <qrCode>",
              "                <fiscalCode>${test_data.creditor_institution}</fiscalCode>",
              "                <noticeNumber>${test_data.payments[0].transfer.notice_number}</noticeNumber>",
              "            </qrCode>",
              "        </nod:verifyPaymentNoticeReq>",
              "    </soapenv:Body>",
              "</soapenv:Envelope>`;",
              "pm.variables.set(\"wisp_dismantling.verify_payment_notice.request\", request);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "SOAPAction",
            "value": "verifyPaymentNotice"
          },
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_wisp_nuova_connettivita}}"
          },
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{wisp_dismantling.verify_payment_notice.request}}"
        },
        "url": {
          "raw": "{{url_node_for_psp_auth}}",
          "host": [
            "{{url_node_for_psp_auth}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "5.A) Send an activation for the payment notice [first IUV]",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "",
              "// Generating final request, then set it as variable",
              "var request = `<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:nod=\"http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd\">",
              "    <soapenv:Header/>",
              "    <soapenv:Body>",
              "        <nod:activatePaymentNoticeV2Request>",
              "            <idPSP>${test_data.psp}</idPSP>",
              "            <idBrokerPSP>${test_data.psp_broker}</idBrokerPSP>",
              "            <idChannel>${test_data.channel}</idChannel>",
              "            <password>${test_data.channel_password}</password>",
              "            <idempotencyKey>${test_data.payments[0].transfer.notice_number}_${makeNumericalString(10)}</idempotencyKey>",
              "            <qrCode>",
              "                <fiscalCode>${test_data.creditor_institution}</fiscalCode>",
              "                <noticeNumber>${test_data.payments[0].transfer.notice_number}</noticeNumber>",
              "            </qrCode>",
              "            <expirationTime>120000</expirationTime>",
              "            <amount>${test_data.payments[0].transfer.total_amount}</amount>",
              "            <paymentNote>${test_data.payments[0].transfer.notes}</paymentNote>",
              "        </nod:activatePaymentNoticeV2Request>",
              "    </soapenv:Body>",
              "</soapenv:Envelope>`;",
              "pm.variables.set(\"wisp_dismantling.activate_payment_notice.request\", request);",
              "",
              "",
              "function makeNumericalString(length) {",
              "    let result = '';",
              "    const characters = '0123456789';",
              "    const charactersLength = characters.length;",
              "    let counter = 0;",
              "    while (counter < length) {",
              "      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
              "      counter += 1;",
              "    }",
              "    return result;",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var jsonData = xml2Json(responseBody);",
              "var rptResponse = jsonData[\"soapenv:Envelope\"][\"soapenv:Body\"][\"nfp:activatePaymentNoticeV2Response\"];",
              "",
              "// extract payment token if outcome is OK",
              "let payment_token = \"\";",
              "if (rptResponse[\"outcome\"] === \"OK\") {",
              "    payment_token = rptResponse[\"paymentToken\"];",
              "}",
              "",
              "var test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "test_data.payments[0].transfer.payment_token = payment_token;",
              "pm.collectionVariables.set(\"wisp_dismantling.test_data\", test_data);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "SOAPAction",
            "value": "activatePaymentNoticeV2"
          },
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_wisp_nuova_connettivita}}"
          },
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{wisp_dismantling.activate_payment_notice.request}}"
        },
        "url": {
          "raw": "{{url_node_for_psp_auth}}",
          "host": [
            "{{url_node_for_psp_auth}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "6.A) Close a payment position [OK]",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let test_data = pm.collectionVariables.get(\"wisp_dismantling.test_data\");",
              "",
              "var payment_tokens = [];",
              "var total_amount = 0;",
              "var total_fees = 0;",
              "",
              "",
              "",
              "for (let i = 0; i < test_data.payments.length; i++) {",
              "",
              "    var payment_token = test_data.payments[i].transfer.payment_token;",
              "    if (payment_token !== undefined) {",
              "       payment_tokens.push(payment_token);",
              "    }",
              "",
              "    total_amount += test_data.payments[i].transfer.total_amount;",
              "    total_fees += test_data.payments[i].transfer.total_fees;",
              "}",
              "",
              "",
              "pm.variables.set(\"wisp_dismantling.close_payment.psp\", test_data.psp);",
              "pm.variables.set(\"wisp_dismantling.close_payment.psp_broker\", test_data.psp_broker);",
              "pm.variables.set(\"wisp_dismantling.close_payment.channel\", test_data.channel);",
              "pm.variables.set(\"wisp_dismantling.close_payment.payment_tokens\", JSON.stringify(payment_tokens));",
              "pm.variables.set(\"wisp_dismantling.close_payment.total_amount\", parseFloat(total_amount).toFixed(2));",
              "pm.variables.set(\"wisp_dismantling.close_payment.fee\", parseFloat(total_fees).toFixed(2));",
              "pm.variables.set(\"wisp_dismantling.close_payment.transaction_id\", test_data.transaction_id);",
              "pm.variables.set(\"wisp_dismantling.close_payment.timestamp_operation\", getCurrentDateTime() + \".000Z\");",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "function getCurrentDateTime() {",
              "  const now = new Date();",
              "  const year = now.getFullYear();",
              "  const month = String(now.getMonth() + 1).padStart(2, '0');",
              "  const day = String(now.getDate()).padStart(2, '0');",
              "  const hours = String(now.getHours()).padStart(2, '0');",
              "  const minutes = String(now.getMinutes()).padStart(2, '0');",
              "  const seconds = String(now.getSeconds()).padStart(2, '0');",
              "  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_allapi}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"outcome\": \"OK\",\n    \"paymentTokens\": {{wisp_dismantling.close_payment.payment_tokens}},\n    \"idPSP\": \"{{wisp_dismantling.close_payment.psp}}\",\n    \"idBrokerPSP\": \"{{wisp_dismantling.close_payment.psp_broker}}\",\n    \"idChannel\": \"{{wisp_dismantling.close_payment.channel}}\",\n    \"paymentMethod\": \"CP\",\n    \"transactionId\": \"{{wisp_dismantling.close_payment.transaction_id}}\",\n    \"primaryCiIncurredFee\": 1,\n    \"idBundle\": \"0bf0c282-3054-11ed-af20-acde48001122\",\n    \"idCiBundle\": \"0bf0c35e-3054-11ed-af20-acde48001122\",\n    \"totalAmount\": \"{{wisp_dismantling.close_payment.total_amount}}\",\n    \"fee\": \"{{wisp_dismantling.close_payment.fee}}\",\n    \"timestampOperation\": \"{{wisp_dismantling.close_payment.timestamp_operation}}\",\n    \"additionalPaymentInformations\": {\n        \"rrn\": \"11223344\",\n        \"outcomePaymentGateway\": \"00\",\n        \"totalAmount\": \"{{wisp_dismantling.close_payment.total_amount}}\",\n        \"fee\": \"{{wisp_dismantling.close_payment.fee}}\",\n        \"timestampOperation\": \"{{wisp_dismantling.close_payment.timestamp_operation}}\",\n        \"authorizationCode\": \"123456\",\n        \"paymentGateway\": \"00\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url_nodo_per_pm}}/closepayment",
          "host": [
            "{{url_nodo_per_pm}}"
          ],
          "path": [
            "closepayment"
          ]
        }
      },
      "response": []
    },
    {
      "name": "6.B) [TO EDIT] Close a payment position [KO]",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"paymentTokens\": [\n        \"string\"\n    ],\n    \"outcome\": \"OK\",\n    \"idPSP\": \"string\",\n    \"idBrokerPSP\": \"string\",\n    \"idChannel\": \"string\",\n    \"paymentMethod\": \"string\",\n    \"transactionId\": \"string\",\n    \"totalAmount\": \"20.10\",\n    \"fee\": \"10.00\",\n    \"timestampOperation\": \"2022-02-22T13:41:58.811Z\",\n    \"additionalPaymentInformations\": {\n        \"outcomePaymentGateway\": \"OK\",\n        \"rrn\": \"string\",\n        \"fee\": \"10.00\",\n        \"totalAmount\": \"10.00\",\n        \"timestampOperation\": \"2022-02-22T14:41:58Z\",\n        \"authorizationCode\": \"string\"\n    },\n    \"transactionDetails\": {\n        \"transaction\": {\n            \"transactionId\": \"string\",\n            \"grandTotal\": \"20.10\",\n            \"amount\": \"20.10\",\n            \"fee\": \"10.00\",\n            \"transactionStatus\": \"string\",\n            \"authorizationCode\": \"string\",\n            \"rrn\": \"string\",\n            \"creationDate\": \"2022-02-22T13:41:58.811Z\",\n            \"psp\": {\n                \"idPsp\": \"string\",\n                \"idChannel\": \"string\",\n                \"businessName\": \"string\",\n                \"brokerName\": \"string\",\n                \"pspOnUs\": true\n            },\n            \"errorCode\": \"string\",\n            \"timestampOperation\": \"string\",\n            \"paymentGateway\": \"string\"\n        },\n        \"info\": {\n            \"type\": \"string\",\n            \"brandLogo\": \"string\",\n            \"brand\": \"string\",\n            \"paymentMethodName\": \"string\",\n            \"clientId\": \"string\"\n        },\n        \"user\": {\n            \"type\": \"GUEST\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url_nodo_per_pm}}/closepayment",
          "host": [
            "{{url_nodo_per_pm}}"
          ],
          "path": [
            "closepayment"
          ]
        }
      },
      "response": []
    },
    {
      "name": "7.A) [TO EDIT] Send the payment result [OK]",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"outcome\": \"OK\",\n    \"paymentDate\": \"string\",\n    \"payments\": [\n        {\n            \"paymentToken\": \"string\",\n            \"description\": \"string\",\n            \"creditorReferenceId\": \"string\",\n            \"fiscalCode\": \"string\",\n            \"companyName\": \"string\",\n            \"officeName\": \"string\",\n            \"debtor\": \"string\"\n        }\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url_pm_per_nodo}}/transactions/{transactionId}/user-receipts",
          "host": [
            "{{url_pm_per_nodo}}"
          ],
          "path": [
            "transactions",
            "{transactionId}",
            "user-receipts"
          ]
        }
      },
      "response": []
    },
    {
      "name": "7.B) [TO EDIT] Send the payment result [KO]",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"outcome\": \"KO\",\n    \"paymentDate\": \"string\",\n    \"payments\": [\n        {\n            \"paymentToken\": \"string\",\n            \"description\": \"string\",\n            \"creditorReferenceId\": \"string\",\n            \"fiscalCode\": \"string\",\n            \"companyName\": \"string\",\n            \"officeName\": \"string\",\n            \"debtor\": \"string\"\n        }\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url_pm_per_nodo}}/transactions/{transactionId}/user-receipts",
          "host": [
            "{{url_pm_per_nodo}}"
          ],
          "path": [
            "transactions",
            "{transactionId}",
            "user-receipts"
          ]
        }
      },
      "response": []
    },
    {
      "name": "8.A) [TO EDIT] Send the outcome of the payment position [OK]",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "SOAPAction",
            "value": "sendPaymentOutcomeV2",
            "type": "text"
          },
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_wisp_nuova_connettivita}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd\">\n    <Body>\n        <xsi:sendPaymentOutcomeV2Request>\n            <idPSP xmlns=\"\">idPSP1</idPSP>\n            <idBrokerPSP xmlns=\"\">idBrokerPSP1</idBrokerPSP>\n            <idChannel xmlns=\"\">idChannel1</idChannel>\n            <idempotencyKey xmlns=\"\">idempotencyKey1</idempotencyKey>\n            <paymentTokens xmlns=\"\">\n                <paymentToken>paymentToken1</paymentToken>\n            </paymentTokens>\n            <outcome xmlns=\"\">OK</outcome>\n            <details xmlns=\"\">\n                <paymentMethod>cash</paymentMethod>\n                <paymentChannel>frontOffice</paymentChannel>\n                <fee>1</fee>\n                <primaryCiIncurredFee>1</primaryCiIncurredFee>\n                <idBundle>idBundle1</idBundle>\n                <idCiBundle>idCiBundle1</idCiBundle>\n                <payer>\n                    <uniqueIdentifier>\n                        <entityUniqueIdentifierType>F</entityUniqueIdentifierType>\n                        <entityUniqueIdentifierValue>entityUniqueIde1</entityUniqueIdentifierValue>\n                    </uniqueIdentifier>\n                    <fullName>fullName1</fullName>\n                    <streetName>streetName1</streetName>\n                    <civicNumber>civicNumber1</civicNumber>\n                    <postalCode>postalCode1</postalCode>\n                    <city>city1</city>\n                    <stateProvinceRegion>stateProvinceRegion1</stateProvinceRegion>\n                    <country>country1</country>\n                    <e-mail>e-mail1</e-mail>\n                </payer>\n                <applicationDate>1900-01-01</applicationDate>\n                <transferDate>1900-01-01</transferDate>\n                <marcheDaBollo>\n                    <marcaDaBollo>\n                        <paymentToken>paymentToken1</paymentToken>\n                        <idTransfer>\n                            <Error>Failed to generate sample value</Error>\n                        </idTransfer>\n                    </marcaDaBollo>\n                </marcheDaBollo>\n            </details>\n        </xsi:sendPaymentOutcomeV2Request>\n    </Body>\n</Envelope>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{url_node_for_psp_auth}}",
          "host": [
            "{{url_node_for_psp_auth}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "8.B) [TO EDIT] Send the outcome of the payment position [KO]",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "SOAPAction",
            "value": "sendPaymentOutcomeV2",
            "type": "text"
          },
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subkey_wisp_nuova_connettivita}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/xml",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd\">\n    <Body>\n        <xsi:sendPaymentOutcomeV2Request>\n            <idPSP xmlns=\"\">idPSP1</idPSP>\n            <idBrokerPSP xmlns=\"\">idBrokerPSP1</idBrokerPSP>\n            <idChannel xmlns=\"\">idChannel1</idChannel>\n            <idempotencyKey xmlns=\"\">idempotencyKey1</idempotencyKey>\n            <paymentTokens xmlns=\"\">\n                <paymentToken>paymentToken1</paymentToken>\n            </paymentTokens>\n            <outcome xmlns=\"\">OK</outcome>\n            <details xmlns=\"\">\n                <paymentMethod>cash</paymentMethod>\n                <paymentChannel>frontOffice</paymentChannel>\n                <fee>1</fee>\n                <primaryCiIncurredFee>1</primaryCiIncurredFee>\n                <idBundle>idBundle1</idBundle>\n                <idCiBundle>idCiBundle1</idCiBundle>\n                <payer>\n                    <uniqueIdentifier>\n                        <entityUniqueIdentifierType>F</entityUniqueIdentifierType>\n                        <entityUniqueIdentifierValue>entityUniqueIde1</entityUniqueIdentifierValue>\n                    </uniqueIdentifier>\n                    <fullName>fullName1</fullName>\n                    <streetName>streetName1</streetName>\n                    <civicNumber>civicNumber1</civicNumber>\n                    <postalCode>postalCode1</postalCode>\n                    <city>city1</city>\n                    <stateProvinceRegion>stateProvinceRegion1</stateProvinceRegion>\n                    <country>country1</country>\n                    <e-mail>e-mail1</e-mail>\n                </payer>\n                <applicationDate>1900-01-01</applicationDate>\n                <transferDate>1900-01-01</transferDate>\n                <marcheDaBollo>\n                    <marcaDaBollo>\n                        <paymentToken>paymentToken1</paymentToken>\n                        <idTransfer>\n                            <Error>Failed to generate sample value</Error>\n                        </idTransfer>\n                    </marcaDaBollo>\n                </marcheDaBollo>\n            </details>\n        </xsi:sendPaymentOutcomeV2Request>\n    </Body>\n</Envelope>",
          "options": {
            "raw": {
              "language": "xml"
            }
          }
        },
        "url": {
          "raw": "{{url_node_for_psp_auth}}",
          "host": [
            "{{url_node_for_psp_auth}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "999) [TO EDIT] Require the send to creditor institution of one or more KO receipts",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"[{\\\"paymentToken\\\": \\\"sometoken\\\",\\\"fiscalCode\\\": \\\"15376371009\\\",\\\"noticeNumber\\\": \\\"348171871554242374\\\"}]\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/receipt/ko",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "receipt",
            "ko"
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "wisp_dismantling.redirect.url",
      "value": ""
    },
    {
      "key": "wisp_dismantling.test_data",
      "value": ""
    },
    {
      "key": "wisp_dismantling.iuv_wrong_seg_code",
      "value": ""
    },
    {
      "key": "wisp_dismantling.iupd_wrong_seg_code",
      "value": ""
    }
  ]
}
