name: Integration Tests

on:
  schedule:
    - cron: '00 08 * * *'

  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
        default: uat
      tags:
        description: 'run the tests tagged with'
        required: false
        type: string
        default: 'runnable'
      junit:
        description: 'enable junit'
        required: false
        type: choice
        options:
          - true
          - false
        default: false
      notify:
        required: false
        type: boolean
        description: 'send the slack notification'
        default: false


permissions:
  id-token: write
  contents: read
  deployments: write


jobs:
  integration_test:
    name: Test ${{(github.event.inputs == null && 'dev') || inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{(github.event.inputs == null && 'dev') || inputs.environment }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@1f9a0c22da41e6ebfa534300ef656657ea2c6707

      - name: Create reports folder
        shell: bash
        run: |
          mkdir -p ./integration-test/reports
          mkdir -p ./integration-test/junit

      - name: Login
        id: login
        # from https://github.com/Azure/login/commits/master
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.CI_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}


      - name: Delete old reports
        uses: azure/CLI@v1
        env:
          STORAGE_NAME: ${{ vars.INTEGRATION_TEST_STORAGE_ACCOUNT_NAME }}
          STORAGE_FOLDER: ${{ vars.INTEGRATION_TEST_REPORTS_FOLDER }}
        with:
          inlineScript: |
            az storage blob delete-batch \
            --source "${{ env.STORAGE_FOLDER }}" \
            --account-name "${{ env.STORAGE_NAME }}" \
            --subscription "${{ secrets.SUBSCRIPTION_ID }}" \
            --auth-mode login

      - name: Run Integration Tests
        shell: bash
        run: |
          cd ./integration-test
          docker build -t wispdismantling_test .
          docker run \
          -e INTEGRATION_TEST_GPD_SUBSCRIPTION_KEY="${{ secrets.INTEGRATION_TEST_GPD_SUBSCRIPTION_KEY }}" \
          -e INTEGRATION_TEST_NODO_SUBSCRIPTION_KEY="${{ secrets.INTEGRATION_TEST_NODO_SUBSCRIPTION_KEY }}" \
          -e INTEGRATION_TEST_FORWARDER_SUBSCRIPTION_KEY="${{ secrets.INTEGRATION_TEST_FORWARDER_SUBSCRIPTION_KEY }}" \
          -e INTEGRATION_TEST_TECHNICALSUPPORT_SUBSCRIPTION_KEY="${{ secrets.INTEGRATION_TEST_TECHNICALSUPPORT_SUBSCRIPTION_KEY }}" \
          -e INTEGRATION_TEST_CHANNEL_WISP_PASSWORD="${{ secrets.INTEGRATION_TEST_CHANNEL_WISP_PASSWORD }}" \
          -e INTEGRATION_TEST_CHANNEL_WFESP_PASSWORD="${{ secrets.INTEGRATION_TEST_CHANNEL_WFESP_PASSWORD }}" \
          -e INTEGRATION_TEST_CHANNEL_CHECKOUT_PASSWORD="${{ secrets.INTEGRATION_TEST_CHANNEL_CHECKOUT_PASSWORD }}" \
          -e INTEGRATION_TEST_CHANNEL_PAYMENT_PASSWORD="${{ secrets.INTEGRATION_TEST_CHANNEL_PAYMENT_PASSWORD }}" \
          -e INTEGRATION_TEST_STATION_WISP_PASSWORD="${{ secrets.INTEGRATION_TEST_STATION_WISP_PASSWORD }}" \
          -e TAGS="${{ inputs.tags }}" \
          -e ENV="${{( github.event.inputs == null && 'dev') || inputs.environment }}" \
          -v  ./reports:/app/reports wispdismantling_test

      - name: Upload reports
        uses: azure/CLI@v1
        env:
          STORAGE_NAME: ${{ vars.INTEGRATION_TEST_STORAGE_ACCOUNT_NAME }}
          STORAGE_FOLDER: ${{ vars.INTEGRATION_TEST_REPORTS_FOLDER }}
        with:
          inlineScript: |
            az storage blob upload-batch \
              --destination '${{ env.STORAGE_FOLDER }}/reports' \
              --source ./integration-test/reports \
              --account-name ${{ env.STORAGE_NAME }} \
              --subscription ${{ secrets.SUBSCRIPTION_ID }} \
              --overwrite true \
              --auth-mode login

      - name: Upload junit
        if: ${{ inputs.junit == true }}
        uses: azure/CLI@v1
        env:
          STORAGE_NAME: ${{ vars.INTEGRATION_TEST_STORAGE_ACCOUNT_NAME }}
          STORAGE_FOLDER: ${{ vars.INTEGRATION_TEST_REPORTS_FOLDER }}
        with:
          inlineScript: |
            az storage blob upload-batch \
              --destination '${{ env.STORAGE_FOLDER }}/junit' \
              --source ./integration-test/junit \
              --account-name ${{ env.STORAGE_NAME }} \
              --subscription ${{ secrets.SUBSCRIPTION_ID }} \
              --overwrite true \
              --auth-mode login                      

  notify:
    needs: [ integration_test ]
    runs-on: ubuntu-latest
    name: Notify
    if: ${{ always() && inputs.notify == 'true' }}
    steps:
      - name: Report Status
        if: ${{ inputs.notify }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ needs.integration_test.result }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notify_when: 'failure,skipped'
          notification_title: '<{run_url}|Scheduled Integration Test> has {status_message}'
          message_format: '{emoji} <{run_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
          footer: 'Linked to <{workflow_url}| workflow file>'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#  delete_github_deployments:
#    runs-on: ubuntu-latest
#    needs: integration_test
#    if: ${{ always() }}
#    steps:
#      - name: Delete Previous deployments
#        uses: actions/github-script@v6
#        env:
#          SHA_HEAD: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.sha) || github.sha}}
#        with:
#          script: |
#            const { SHA_HEAD } = process.env
#
#            const deployments = await github.rest.repos.listDeployments({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              sha: SHA_HEAD
#            });
#            await Promise.all(
#              deployments.data.map(async (deployment) => {
#                await github.rest.repos.createDeploymentStatus({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  deployment_id: deployment.id,
#                  state: 'inactive'
#                });
#                return github.rest.repos.deleteDeployment({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  deployment_id: deployment.id
#                });
#              })
#            );
